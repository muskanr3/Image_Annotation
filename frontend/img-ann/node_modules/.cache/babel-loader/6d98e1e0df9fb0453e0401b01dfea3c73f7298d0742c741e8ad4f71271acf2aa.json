{"ast":null,"code":"function BufferStream(buffer, offset, length, bigEndian) {\n  this.buffer = buffer;\n  this.offset = offset || 0;\n  length = typeof length === 'number' ? length : buffer.length;\n  this.endPosition = this.offset + length;\n  this.setBigEndian(bigEndian);\n}\nBufferStream.prototype = {\n  setBigEndian: function (bigEndian) {\n    this.bigEndian = !!bigEndian;\n  },\n  nextUInt8: function () {\n    var value = this.buffer.readUInt8(this.offset);\n    this.offset += 1;\n    return value;\n  },\n  nextInt8: function () {\n    var value = this.buffer.readInt8(this.offset);\n    this.offset += 1;\n    return value;\n  },\n  nextUInt16: function () {\n    var value = this.bigEndian ? this.buffer.readUInt16BE(this.offset) : this.buffer.readUInt16LE(this.offset);\n    this.offset += 2;\n    return value;\n  },\n  nextUInt32: function () {\n    var value = this.bigEndian ? this.buffer.readUInt32BE(this.offset) : this.buffer.readUInt32LE(this.offset);\n    this.offset += 4;\n    return value;\n  },\n  nextInt16: function () {\n    var value = this.bigEndian ? this.buffer.readInt16BE(this.offset) : this.buffer.readInt16LE(this.offset);\n    this.offset += 2;\n    return value;\n  },\n  nextInt32: function () {\n    var value = this.bigEndian ? this.buffer.readInt32BE(this.offset) : this.buffer.readInt32LE(this.offset);\n    this.offset += 4;\n    return value;\n  },\n  nextFloat: function () {\n    var value = this.bigEndian ? this.buffer.readFloatBE(this.offset) : this.buffer.readFloatLE(this.offset);\n    this.offset += 4;\n    return value;\n  },\n  nextDouble: function () {\n    var value = this.bigEndian ? this.buffer.readDoubleBE(this.offset) : this.buffer.readDoubleLE(this.offset);\n    this.offset += 8;\n    return value;\n  },\n  nextBuffer: function (length) {\n    var value = this.buffer.slice(this.offset, this.offset + length);\n    this.offset += length;\n    return value;\n  },\n  remainingLength: function () {\n    return this.endPosition - this.offset;\n  },\n  nextString: function (length) {\n    var value = this.buffer.toString('utf8', this.offset, this.offset + length);\n    this.offset += length;\n    return value;\n  },\n  mark: function () {\n    var self = this;\n    return {\n      openWithOffset: function (offset) {\n        offset = (offset || 0) + this.offset;\n        return new BufferStream(self.buffer, offset, self.endPosition - offset, self.bigEndian);\n      },\n      offset: this.offset\n    };\n  },\n  offsetFrom: function (marker) {\n    return this.offset - marker.offset;\n  },\n  skip: function (amount) {\n    this.offset += amount;\n  },\n  branch: function (offset, length) {\n    length = typeof length === 'number' ? length : this.endPosition - (this.offset + offset);\n    return new BufferStream(this.buffer, this.offset + offset, length, this.bigEndian);\n  }\n};\nmodule.exports = BufferStream;","map":{"version":3,"names":["BufferStream","buffer","offset","length","bigEndian","endPosition","setBigEndian","prototype","nextUInt8","value","readUInt8","nextInt8","readInt8","nextUInt16","readUInt16BE","readUInt16LE","nextUInt32","readUInt32BE","readUInt32LE","nextInt16","readInt16BE","readInt16LE","nextInt32","readInt32BE","readInt32LE","nextFloat","readFloatBE","readFloatLE","nextDouble","readDoubleBE","readDoubleLE","nextBuffer","slice","remainingLength","nextString","toString","mark","self","openWithOffset","offsetFrom","marker","skip","amount","branch","module","exports"],"sources":["/home/muskan/imgFrontend/img-ann/node_modules/exif-parser/lib/bufferstream.js"],"sourcesContent":["function BufferStream(buffer, offset, length, bigEndian) {\n\tthis.buffer = buffer;\n\tthis.offset = offset || 0;\n\tlength = typeof length === 'number' ? length : buffer.length;\n\tthis.endPosition = this.offset + length;\n\tthis.setBigEndian(bigEndian);\n}\n\nBufferStream.prototype = {\n\tsetBigEndian: function(bigEndian) {\n\t\tthis.bigEndian = !!bigEndian;\n\t},\n\tnextUInt8: function() {\n\t\tvar value = this.buffer.readUInt8(this.offset);\n\t\tthis.offset += 1;\n\t\treturn value;\n\t},\n\tnextInt8: function() {\n\t\tvar value = this.buffer.readInt8(this.offset);\n\t\tthis.offset += 1;\n\t\treturn value;\n\t},\n\tnextUInt16: function() {\n\t\tvar value = this.bigEndian ? this.buffer.readUInt16BE(this.offset) : this.buffer.readUInt16LE(this.offset);\n\t\tthis.offset += 2;\n\t\treturn value;\n\t},\n\tnextUInt32: function() {\n\t\tvar value = this.bigEndian ? this.buffer.readUInt32BE(this.offset) : this.buffer.readUInt32LE(this.offset);\n\t\tthis.offset += 4;\n\t\treturn value;\n\t},\n\tnextInt16: function() {\n\t\tvar value = this.bigEndian ? this.buffer.readInt16BE(this.offset) : this.buffer.readInt16LE(this.offset);\n\t\tthis.offset += 2;\n\t\treturn value;\n\t},\n\tnextInt32: function() {\n\t\tvar value = this.bigEndian ? this.buffer.readInt32BE(this.offset) : this.buffer.readInt32LE(this.offset);\n\t\tthis.offset += 4;\n\t\treturn value;\n\t},\n\tnextFloat: function() {\n\t\tvar value = this.bigEndian ? this.buffer.readFloatBE(this.offset) : this.buffer.readFloatLE(this.offset);\n\t\tthis.offset += 4;\n\t\treturn value;\n\t},\n\tnextDouble: function() {\n\t\tvar value = this.bigEndian ? this.buffer.readDoubleBE(this.offset) : this.buffer.readDoubleLE(this.offset);\n\t\tthis.offset += 8;\n\t\treturn value;\n\t},\n\tnextBuffer: function(length) {\n\t\tvar value = this.buffer.slice(this.offset, this.offset + length);\n\t\tthis.offset += length;\n\t\treturn value;\n\t},\n\tremainingLength: function() {\n\t\treturn this.endPosition - this.offset;\n\t},\n\tnextString: function(length) {\n\t\tvar value = this.buffer.toString('utf8', this.offset, this.offset + length);\n\t\tthis.offset += length;\n\t\treturn value;\n\t},\n\tmark: function() {\n\t\tvar self = this;\n\t\treturn {\n\t\t\topenWithOffset: function(offset) {\n\t\t\t\toffset = (offset || 0) + this.offset;\n\t\t\t\treturn new BufferStream(self.buffer, offset, self.endPosition - offset, self.bigEndian);\n\t\t\t},\n\t\t\toffset: this.offset\n\t\t};\n\t},\n\toffsetFrom: function(marker) {\n\t\treturn this.offset - marker.offset;\n\t},\n\tskip: function(amount) {\n\t\tthis.offset += amount;\n\t},\n\tbranch: function(offset, length) {\n\t\tlength = typeof length === 'number' ? length : this.endPosition - (this.offset + offset);\n\t\treturn new BufferStream(this.buffer, this.offset + offset, length, this.bigEndian);\n\t}\n};\n\nmodule.exports = BufferStream;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}