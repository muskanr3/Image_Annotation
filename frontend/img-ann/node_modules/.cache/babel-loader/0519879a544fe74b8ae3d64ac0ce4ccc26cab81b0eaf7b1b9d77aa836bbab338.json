{"ast":null,"code":"var exif = require('./exif');\nvar date = require('./date');\nvar degreeTags = [{\n  section: exif.GPSIFD,\n  type: 0x0002,\n  name: 'GPSLatitude',\n  refType: 0x0001,\n  refName: 'GPSLatitudeRef',\n  posVal: 'N'\n}, {\n  section: exif.GPSIFD,\n  type: 0x0004,\n  name: 'GPSLongitude',\n  refType: 0x0003,\n  refName: 'GPSLongitudeRef',\n  posVal: 'E'\n}];\nvar dateTags = [{\n  section: exif.SubIFD,\n  type: 0x0132,\n  name: 'ModifyDate'\n}, {\n  section: exif.SubIFD,\n  type: 0x9003,\n  name: 'DateTimeOriginal'\n}, {\n  section: exif.SubIFD,\n  type: 0x9004,\n  name: 'CreateDate'\n}, {\n  section: exif.SubIFD,\n  type: 0x0132,\n  name: 'ModifyDate'\n}];\nmodule.exports = {\n  castDegreeValues: function (getTagValue, setTagValue) {\n    degreeTags.forEach(function (t) {\n      var degreeVal = getTagValue(t);\n      if (degreeVal) {\n        var degreeRef = getTagValue({\n          section: t.section,\n          type: t.refType,\n          name: t.refName\n        });\n        var degreeNumRef = degreeRef === t.posVal ? 1 : -1;\n        var degree = (degreeVal[0] + degreeVal[1] / 60 + degreeVal[2] / 3600) * degreeNumRef;\n        setTagValue(t, degree);\n      }\n    });\n  },\n  castDateValues: function (getTagValue, setTagValue) {\n    dateTags.forEach(function (t) {\n      var dateStrVal = getTagValue(t);\n      if (dateStrVal) {\n        //some easy checks to determine two common date formats\n        var timestamp = date.parseExifDate(dateStrVal);\n        if (typeof timestamp !== 'undefined') {\n          setTagValue(t, timestamp);\n        }\n      }\n    });\n  },\n  simplifyValue: function (values, format) {\n    if (Array.isArray(values)) {\n      values = values.map(function (value) {\n        if (format === 10 || format === 5) {\n          return value[0] / value[1];\n        }\n        return value;\n      });\n      if (values.length === 1) {\n        values = values[0];\n      }\n    }\n    return values;\n  }\n};","map":{"version":3,"names":["exif","require","date","degreeTags","section","GPSIFD","type","name","refType","refName","posVal","dateTags","SubIFD","module","exports","castDegreeValues","getTagValue","setTagValue","forEach","t","degreeVal","degreeRef","degreeNumRef","degree","castDateValues","dateStrVal","timestamp","parseExifDate","simplifyValue","values","format","Array","isArray","map","value","length"],"sources":["/home/muskan/imgFrontend/img-ann/node_modules/exif-parser/lib/simplify.js"],"sourcesContent":["var exif = require('./exif');\nvar date = require('./date');\n\nvar degreeTags = [{\n\tsection: exif.GPSIFD,\n\ttype: 0x0002,\n\tname: 'GPSLatitude',\n\trefType: 0x0001,\n\trefName: 'GPSLatitudeRef',\n\tposVal: 'N'\n},\n{\n\tsection: exif.GPSIFD,\n\ttype: 0x0004,\n\tname: 'GPSLongitude',\n\trefType: 0x0003,\n\trefName: 'GPSLongitudeRef',\n\tposVal: 'E'\n}];\nvar dateTags = [{\n\tsection: exif.SubIFD,\n\ttype: 0x0132,\n\tname: 'ModifyDate'\n},\n{\n\tsection: exif.SubIFD,\n\ttype: 0x9003,\n\tname: 'DateTimeOriginal'\n},\n{\n\tsection: exif.SubIFD,\n\ttype: 0x9004,\n\tname: 'CreateDate'\n},\n{\n\tsection: exif.SubIFD,\n\ttype: 0x0132,\n\tname : 'ModifyDate',\n}];\n\nmodule.exports = {\n\tcastDegreeValues: function(getTagValue, setTagValue) {\n\t\tdegreeTags.forEach(function(t) {\n\t\t\tvar degreeVal = getTagValue(t);\n\t\t\tif(degreeVal) {\n\t\t\t\tvar degreeRef = getTagValue({section: t.section, type: t.refType, name: t.refName});\n\t\t\t\tvar degreeNumRef = degreeRef === t.posVal ? 1 : -1;\n\t\t\t\tvar degree = (degreeVal[0] + (degreeVal[1] / 60) + (degreeVal[2] / 3600)) * degreeNumRef;\n\t\t\t\tsetTagValue(t, degree);\n\t\t\t}\n\t\t});\n\t},\n\tcastDateValues: function(getTagValue, setTagValue) {\n\t\tdateTags.forEach(function(t) {\n\t\t\tvar dateStrVal = getTagValue(t);\n\t\t\tif(dateStrVal) {\n\t\t\t\t//some easy checks to determine two common date formats\n\t\t\t\tvar timestamp = date.parseExifDate(dateStrVal);\n\t\t\t\tif(typeof timestamp !== 'undefined') {\n\t\t\t\t\tsetTagValue(t, timestamp);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},\n\tsimplifyValue: function(values, format) {\n\t\tif(Array.isArray(values)) {\n\t\t\tvalues = values.map(function(value) {\n\t\t\t\tif(format === 10 || format === 5) {\n\t\t\t\t\treturn value[0] / value[1];\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t});\n\t\t\tif(values.length === 1) {\n\t\t\t\tvalues = values[0];\n\t\t\t}\n\t\t}\n\t\treturn values;\n\t}\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}