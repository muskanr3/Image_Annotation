{"ast":null,"code":"function parseNumber(s) {\n  return parseInt(s, 10);\n}\n\n//in seconds\nvar hours = 3600;\nvar minutes = 60;\n\n//take date (year, month, day) and time (hour, minutes, seconds) digits in UTC\n//and return a timestamp in seconds\nfunction parseDateTimeParts(dateParts, timeParts) {\n  dateParts = dateParts.map(parseNumber);\n  timeParts = timeParts.map(parseNumber);\n  var year = dateParts[0];\n  var month = dateParts[1] - 1;\n  var day = dateParts[2];\n  var hours = timeParts[0];\n  var minutes = timeParts[1];\n  var seconds = timeParts[2];\n  var date = Date.UTC(year, month, day, hours, minutes, seconds, 0);\n  var timestamp = date / 1000;\n  return timestamp;\n}\n\n//parse date with \"2004-09-04T23:39:06-08:00\" format,\n//one of the formats supported by ISO 8601, and\n//convert to utc timestamp in seconds\nfunction parseDateWithTimezoneFormat(dateTimeStr) {\n  var dateParts = dateTimeStr.substr(0, 10).split('-');\n  var timeParts = dateTimeStr.substr(11, 8).split(':');\n  var timezoneStr = dateTimeStr.substr(19, 6);\n  var timezoneParts = timezoneStr.split(':').map(parseNumber);\n  var timezoneOffset = timezoneParts[0] * hours + timezoneParts[1] * minutes;\n  var timestamp = parseDateTimeParts(dateParts, timeParts);\n  //minus because the timezoneOffset describes\n  //how much the described time is ahead of UTC\n  timestamp -= timezoneOffset;\n  if (typeof timestamp === 'number' && !isNaN(timestamp)) {\n    return timestamp;\n  }\n}\n\n//parse date with \"YYYY:MM:DD hh:mm:ss\" format, convert to utc timestamp in seconds\nfunction parseDateWithSpecFormat(dateTimeStr) {\n  var parts = dateTimeStr.split(' '),\n    dateParts = parts[0].split(':'),\n    timeParts = parts[1].split(':');\n  var timestamp = parseDateTimeParts(dateParts, timeParts);\n  if (typeof timestamp === 'number' && !isNaN(timestamp)) {\n    return timestamp;\n  }\n}\nfunction parseExifDate(dateTimeStr) {\n  //some easy checks to determine two common date formats\n\n  //is the date in the standard \"YYYY:MM:DD hh:mm:ss\" format?\n  var isSpecFormat = dateTimeStr.length === 19 && dateTimeStr.charAt(4) === ':';\n  //is the date in the non-standard format,\n  //\"2004-09-04T23:39:06-08:00\" to include a timezone?\n  var isTimezoneFormat = dateTimeStr.length === 25 && dateTimeStr.charAt(10) === 'T';\n  var timestamp;\n  if (isTimezoneFormat) {\n    return parseDateWithTimezoneFormat(dateTimeStr);\n  } else if (isSpecFormat) {\n    return parseDateWithSpecFormat(dateTimeStr);\n  }\n}\nmodule.exports = {\n  parseDateWithSpecFormat: parseDateWithSpecFormat,\n  parseDateWithTimezoneFormat: parseDateWithTimezoneFormat,\n  parseExifDate: parseExifDate\n};","map":{"version":3,"names":["parseNumber","s","parseInt","hours","minutes","parseDateTimeParts","dateParts","timeParts","map","year","month","day","seconds","date","Date","UTC","timestamp","parseDateWithTimezoneFormat","dateTimeStr","substr","split","timezoneStr","timezoneParts","timezoneOffset","isNaN","parseDateWithSpecFormat","parts","parseExifDate","isSpecFormat","length","charAt","isTimezoneFormat","module","exports"],"sources":["/home/muskan/imgFrontend/img-ann/node_modules/exif-parser/lib/date.js"],"sourcesContent":["function parseNumber(s) {\n\treturn parseInt(s, 10);\n}\n\n//in seconds\nvar hours = 3600;\nvar minutes = 60;\n\n//take date (year, month, day) and time (hour, minutes, seconds) digits in UTC\n//and return a timestamp in seconds\nfunction parseDateTimeParts(dateParts, timeParts) {\n\tdateParts = dateParts.map(parseNumber);\n\ttimeParts = timeParts.map(parseNumber);\n\tvar year = dateParts[0];\n\tvar month = dateParts[1] - 1;\n\tvar day = dateParts[2];\n\tvar hours = timeParts[0];\n\tvar minutes = timeParts[1];\n\tvar seconds = timeParts[2];\n\tvar date = Date.UTC(year, month, day, hours, minutes, seconds, 0);\n\tvar timestamp = date / 1000;\n\treturn timestamp;\n}\n\n//parse date with \"2004-09-04T23:39:06-08:00\" format,\n//one of the formats supported by ISO 8601, and\n//convert to utc timestamp in seconds\nfunction parseDateWithTimezoneFormat(dateTimeStr) {\n\n\tvar dateParts = dateTimeStr.substr(0, 10).split('-');\n\tvar timeParts = dateTimeStr.substr(11, 8).split(':');\n\tvar timezoneStr = dateTimeStr.substr(19, 6);\n\tvar timezoneParts = timezoneStr.split(':').map(parseNumber);\n\tvar timezoneOffset = (timezoneParts[0] * hours) +\n\t\t(timezoneParts[1] * minutes);\n\n\tvar timestamp = parseDateTimeParts(dateParts, timeParts);\n\t//minus because the timezoneOffset describes\n\t//how much the described time is ahead of UTC\n\ttimestamp -= timezoneOffset;\n\n\tif(typeof timestamp === 'number' && !isNaN(timestamp)) {\n\t\treturn timestamp;\n\t}\n}\n\n//parse date with \"YYYY:MM:DD hh:mm:ss\" format, convert to utc timestamp in seconds\nfunction parseDateWithSpecFormat(dateTimeStr) {\n\tvar parts = dateTimeStr.split(' '),\n\t\tdateParts = parts[0].split(':'),\n\t\ttimeParts = parts[1].split(':');\n\n\tvar timestamp = parseDateTimeParts(dateParts, timeParts);\n\n\tif(typeof timestamp === 'number' && !isNaN(timestamp)) {\n\t\treturn timestamp;\n\t}\n}\n\nfunction parseExifDate(dateTimeStr) {\n\t//some easy checks to determine two common date formats\n\n\t//is the date in the standard \"YYYY:MM:DD hh:mm:ss\" format?\n\tvar isSpecFormat = dateTimeStr.length === 19 &&\n\t\tdateTimeStr.charAt(4) === ':';\n\t//is the date in the non-standard format,\n\t//\"2004-09-04T23:39:06-08:00\" to include a timezone?\n\tvar isTimezoneFormat = dateTimeStr.length === 25 &&\n\t\tdateTimeStr.charAt(10) === 'T';\n\tvar timestamp;\n\n\tif(isTimezoneFormat) {\n\t\treturn parseDateWithTimezoneFormat(dateTimeStr);\n\t}\n\telse if(isSpecFormat) {\n\t\treturn parseDateWithSpecFormat(dateTimeStr);\n\t}\n}\n\nmodule.exports = {\n\tparseDateWithSpecFormat: parseDateWithSpecFormat,\n\tparseDateWithTimezoneFormat: parseDateWithTimezoneFormat,\n\tparseExifDate: parseExifDate\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}